@page "{guild?}/inactiverole"
@using Database.Data
@using Discord.Rest
@model UtiliSite.Pages.Dashboard.InactiveRoleModel
@{
    Layout = "Shared/_Layout.cshtml";
    ViewData["Title"] = "Inactive Role - Utili Dashboard";

    ViewData["heading"] = "Inactive Role";
    ViewData["subheading"] = "Set a role to be given to or taken from inactive users\ninactive list (page)\ninactive kick";
    ViewData["detailed"] = "If a user hasn't sent a message or joined a voice channel for the threshold, they'll be marked as inactive.\nUtili checks for inactive users every 60 minutes.";

    InactiveRoleRow row = (InactiveRoleRow)ViewData["row"];
    RestGuild guild = (RestGuild)ViewData["guild"];
    bool premium = (bool) ViewData["premium"];
}

<div>
    <div class="card-container-4">
        <form method="post">

            <input type="text" name="heading" class="form-control card-component-4 card-strong card-heading" style="" value="Settings" readonly>

            <div class="input-group flex-nowrap">
                <span class="input-group-prepend input-group-text card-component-2">Inactive Role</span>
                <select class="custom-select card-component-2" name="inactiveRole">
                    <!option value="0" @InactiveRoleModel.GetIsRoleSelected(0, row.RoleId)>None</!option>
                    @foreach (RestRole role in guild.Roles.Where(x => !x.IsEveryone).OrderBy(x => -x.Position))
                    {
                        <!option value="@role.Id" @InactiveRoleModel.GetIsRoleSelected(role.Id, row.RoleId)>@role.Name</!option>
                    }
                </select>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-prepend input-group-text card-component-2">Immune Role</span>
                <select class="custom-select card-component-2" name="immuneRole">
                    <!option value="0" @InactiveRoleModel.GetIsRoleSelected(0, row.RoleId)>None</!option>
                    @foreach (RestRole role in guild.Roles.Where(x => !x.IsEveryone).OrderBy(x => -x.Position))
                    {
                        <!option value="@role.Id" @InactiveRoleModel.GetIsRoleSelected(role.Id, row.ImmuneRoleId)>@role.Name</!option>
                    }
                </select>
            </div>

            <div class="input-group flex-nowrap" @Html.Raw(ContentHelper.Tooltip("dd:hh:mm:ss", "top"))>
                <span class="input-group-prepend input-group-text card-component-2">Threshold</span>
                <input type="text" name="threshold" class="form-control card-component-2" value="@row.Threshold.ToStandardString()">
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-prepend input-group-text card-component-2">Mode</span>
                <select class="custom-select card-component-2" name="inverse">
                    <!option value="false" @InactiveRoleModel.GetIsBoolSelected(false, row.Inverse)>Give role</!option>
                    <!option value="true" @InactiveRoleModel.GetIsBoolSelected(true, row.Inverse)>Take role</!option>
                </select>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text card-component-3 card-strong"></span>
                <button type="submit" class="btn card-button card-component-1 card-strong">Save</button>
            </div>
        </form>
    </div>
    
    @if (premium)
    {
        <div class="card-container-4 belowcards">
            <form method="post">

                <input type="text" name="heading" class="form-control card-component-4 card-strong card-heading" style="" value="Auto Kick (requires inactive role)" readonly>
            
                <div class="input-group flex-nowrap">
                    <span class="input-group-prepend input-group-text card-component-2">Enable</span>
                    <div class="input-group-text card-component-2">
                        <input type="checkbox" name="enable" class="form-control checkbox" @(row.AutoKick ? "checked" : "") )>
                    </div>
                </div>

                <div class="input-group flex-nowrap" @Html.Raw(ContentHelper.Tooltip("dd:hh:mm:ss", "top"))>
                    <span class="input-group-prepend input-group-text card-component-2">Additional Threshold</span>
                    <input type="text" name="threshold" class="form-control card-component-2" value="@row.AutoKickThreshold.ToStandardString()">
                </div>

                <div class="input-group flex-nowrap">
                    <span class="input-group-text card-component-3 card-strong"></span>
                    <button type="submit" class="btn card-button card-component-1 card-strong">Save</button>
                </div>
            </form>
        </div>
    }
</div>
